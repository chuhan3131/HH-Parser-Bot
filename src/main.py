import time
import schedule
from datetime import time as dt_time
from builder import build_url, get_config
from parser import (
    parse_vacancies_from_url, similarity_check, send_telegram_message,
    connect_db, is_vacancy_sent, mark_vacancy_sent, format_vacancy_message,
    create_table_if_not_exists, send_statistics, get_time
)


def schedule_stats(db_conn, config):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if config.get("daily_stats", True):
        schedule.every().day.at("00:00").do(
            lambda: send_statistics(db_conn, config["bot_token"], config["chat_id"])
        )
        print("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 00:00 –ø–æ –ú–æ—Å–∫–≤–µ")

def job(db_conn, config):
    print("üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏...")
    page = 0
    new_found = False
    vacancies_found_today = 0
    
    while True:
        url = build_url(
            config["search_text"], 
            config["excluded_text"], 
            config["area_ids"], 
            config["experience"], 
            page
        )
        
        vacancies = parse_vacancies_from_url(url)
        
        if not vacancies:
            print("‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã/–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            break
            
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
        
        for v in vacancies:
            is_similar, similarity_percent = similarity_check(config["search_text"], v, config["min_similarity"])
            
            if is_similar:
                if not is_vacancy_sent(db_conn, v['href']):
                    print(f"‚úÖ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: {v['title']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity_percent}%)")

                    success = send_telegram_message(config["bot_token"], config["chat_id"], v)
                    if success:
                        mark_vacancy_sent(db_conn, v['href'], v['title'], v['company'])
                        new_found = True
                        vacancies_found_today += 1
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º")
                else:
                    print(f"‚è© –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {v['title']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity_percent}%)")
            else:
                print(f"‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: {v['title']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity_percent}%)")

        if len(vacancies) < 20:
            print("üèÅ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞")
            break
            
        page += 1
        time.sleep(1) 
    
    if new_found:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {vacancies_found_today} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π!")
    else:
        print("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def main():
    config = get_config()

    if not config["bot_token"] or not config["chat_id"]:
        print("‚ùå –û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ builder.py –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        return
    
    print("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ config.json")
    print(f"üîç –ü–æ–∏—Å–∫: {config['search_text']}")
    print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {config['interval']} –º–∏–Ω—É—Ç")
    print(f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'–í–ö–õ' if config.get('daily_stats', True) else '–í–´–ö–õ'}")

    db_conn = connect_db()
    if db_conn:
        create_table_if_not_exists(db_conn)
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, —Ä–∞–±–æ—Ç–∞—é –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏!")
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ: {get_time().strftime('%H:%M:%S')}")


    def scheduled_job():
        job(db_conn, config)

    schedule.every(config["interval"]).minutes.do(scheduled_job)

    schedule_stats(db_conn, config)

    scheduled_job()

    try:
        while True:
            schedule.run_pending()
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    finally:
        if db_conn:
            db_conn.close()

if __name__ == "__main__":
    main()